/*
 * ARQUIVO: src/Handlers/recrutamentoHandler.js
 * * Responsabilidade: Cont√©m toda a l√≥gica relacionada
 * ao recrutamento de jogadores via fichas enviadas no WhatsApp.
 * Hist√≥rias de Usu√°rio Atendidas:
 * 2.1: Restringir comandos a grupos espec√≠ficos.
 * 2.2: Implementar o comando /registrar <n√∫mero> (respondendo √† ficha).
 * 2.3: Implementar o comando /andamento clas.
 * 2.4: Implementar o comando /andamento players.
 * 2.5: Implementar o comando /exportar (enviar contatos por cl√£).
 * √â importante notar que este handler √© Adicionado     
 * ao roteador de comandos em src/routes.js.
 * v1.8: Adicionado comando !menu para admins.
*/

// Importa nossos m√≥dulos utilit√°rios
const parser = require('../../utils/parser.js');
const db = require('../../utils/database.js');
const config = require('../configs/ids-groups.json');

// Importa libs
const moment = require('moment-timezone');
const fs = require('fs');
const path = require('path');

// --- Fun√ß√£o auxiliar: gerar vCard simples (fallback) ---
function gerarVCardFallback(nome, numero) {
    const tel = (numero || '').replace(/[^0-9]/g, '');
    const lines = [
        'BEGIN:VCARD',
        'VERSION:3.0',
        `FN:${nome || ''}`
    ];
    if (tel) lines.push(`TEL;TYPE=CELL:${tel}`);
    lines.push('END:VCARD');
    return lines.join('\n');
}
// --- Fim gerarVCardFallback ---


// --- Fun√ß√µes Auxiliares (Mockups) ---
// --- Fun√ß√£o checkAdmin ATUALIZADA com Logs ---
const checkAdmin = async (sock, msg) => {
    const groupId = msg.key.remoteJid;
    // Garante que s√≥ execute em grupos
    if (!groupId || !groupId.endsWith('@g.us')) {
        return false;
    }

    const senderJid = msg.key.participant || msg.key.remoteJid; // Quem enviou

    try {
        // Busca os metadados do grupo
        const groupMetadata = await sock.groupMetadata(groupId);
        
        // Encontra as informa√ß√µes do participante espec√≠fico
        const participantInfo = groupMetadata.participants.find(p => p.id === senderJid);

        if (!participantInfo) {
            return false; // Se n√£o achou o participante, n√£o pode ser admin
        }

        // A l√≥gica de verifica√ß√£o (padr√£o Baileys)
        const isAdmin = participantInfo.admin === 'admin' || participantInfo.admin === 'superadmin';        
        return isAdmin; // Retorna true se for 'admin' ou 'superadmin', false caso contr√°rio (incluindo null/undefined)

    } catch (e) {
        // Se der erro (ex: bot n√£o est√° mais no grupo, API mudou), assume que n√£o √© admin
        return false;
    }
};
// --- Fim da fun√ß√£o checkAdmin ---

/**
 * O Handler Principal de Recrutamento
*/
async function handlerRecrutamento(sock, msg, text) {
    const info = msg;
    const from = info.key.remoteJid;

    // --- 1. Verifica√ß√£o de Escopo (Hist√≥ria 2.1) ---
    if (!config.allowedRecruitmentGroups.includes(from)) {
        return;
    }

    // --- 2. Extra√ß√£o de Comando e Argumentos ---
    const args = text.split(' ').slice(1);
    const command = text.split(' ')[0].toLowerCase();

    // --- 3. Roteamento de Sub-Comandos ---
    switch (command) {
        case '!processar':
        case '!registrar':
            await executarRegistrar(sock, info, args, text);
            break;

        case '!andamento':
            await executarAndamento(sock, info, args);
            break;

        case '!exportar':
        case '!enviarcontatos':
            await executarExportarContatos(sock, info, args);
            break;
        // --- NOVA ROTA PARA O MENU DE ADMIN ---
        case '!menu':
        case '!ajuda':
        case '!comandos': // Adiciona mais aliases se quiser
            await executarMenuAdmin(sock, info, args);
            break;
        // --- FIM DA NOVA ROTA ---
    }
}

/*
 * L√≥gica do comando !processar
 * v1.11 - Implementada separa√ß√£o por nova linha (\n) entre n√∫mero e overrides.
 * Formato Esperado:
 * !processar <numero com espa√ßos/etc>
 * [opcional: overrides chave=valor na(s) linha(s) seguinte(s)]
 */
async function executarRegistrar(sock, info, args, text) { // args n√£o √© mais usado diretamente para parsing principal
    const from = info.key.remoteJid;
    try {
        const isAdmin = await checkAdmin(sock, info);
        if (!isAdmin) {
             await sock.sendMessage(from, { text: '‚ö† Apenas administradores podem usar este comando.' }, { quoted: info });
            return;
        }

        const ctx = info.message?.extendedTextMessage?.contextInfo;
        const quoted = ctx?.quotedMessage;

        // --- MUDAN√áA: Extra√ß√£o de N√∫mero e Overrides com Base em Linhas ---

        // 1. Separa o texto completo em linhas
        const lines = text.trim().split('\n');
        const firstLine = lines[0].trim(); // Linha do comando e n√∫mero
        // Junta todas as linhas *depois* da primeira, separadas por espa√ßo, para parsing dos overrides
        const overrideLinesString = lines.length > 1 ? lines.slice(1).join(' ').trim() : ''; 

        // 2. Extrai o comando e o n√∫mero da *primeira linha*
        const commandParts = firstLine.split(' ');
        // Pega TUDO depois do primeiro espa√ßo como parte do n√∫mero
        const numberInput = commandParts.length > 1 ? commandParts.slice(1).join(' ').trim() : ''; 

        // 3. Limpa e valida o n√∫mero
        const numeroLimpo = (numberInput || '').replace(/[^0-9]/g, '');
        if (numeroLimpo.length < 8) {
            await sock.sendMessage(from, { text: '‚ö† N√∫mero de celular inv√°lido ou n√£o encontrado na primeira linha.\nEx:\n!processar +55 43 9999-8888\ncla=Exemplo' }, { quoted: info });
            return;
        }
        const targetJid = `${numeroLimpo}@s.whatsapp.net`;

        // 4. Extrai os overrides da string formada pela(s) linha(s) *seguinte(s)*
        const overrides = {};
        const camposPermitidos = ['nome', 'cla', 'recrutadopor'];
        if (overrideLinesString) { // S√≥ processa se houver linhas de override
            const overrideRegex = /(\w+)=("([^"]+)"|'([^']+)'|(\S+))/g;
            let match;
            while ((match = overrideRegex.exec(overrideLinesString)) !== null) {
                const key = match[1].trim().toLowerCase();
                const value = match[3] || match[4] || match[5];
                if (value && camposPermitidos.includes(key)) {
                    const finalKey = key === 'recrutadopor' ? 'recrutadoPorTexto' : key;
                    overrides[finalKey] = value.trim();
                }
            }
        }
        console.log("[Registrar] N√∫mero Input:", numberInput);
        console.log("[Registrar] Overrides encontrados:", overrides);
        // --- FIM DA MUDAN√áA ---

        // --- L√ìGICA AJUSTADA PARA DETERMINAR textoFicha e autorDaFichaJid ---
        let textoFicha = '';
        let autorDaFichaJid = null;

        if (quoted) {
            // Cen√°rio 1: Resposta (Sempre pega texto da resposta como base)
            textoFicha = parser.extractText(quoted);
            autorDaFichaJid = ctx?.participant;
            // Valida√ß√£o do autor da ficha original (se aplic√°vel e necess√°rio)
            // if (!autorDaFichaJid) { /* ... (erro autor) ... */ return; } // Removido - Deixa o parser lidar
        } else if (Object.keys(overrides).length > 0) {
            // Cen√°rio 2: Sem resposta, MAS com overrides. Ficha base √© vazia.
            textoFicha = ''; // For√ßa depender dos overrides
            autorDaFichaJid = null;
        } else {
            // Cen√°rio 3: Sem resposta E SEM overrides. Erro.
            await sock.sendMessage(from, { text: '‚ö† Comando inv√°lido. Use respondendo a uma ficha OU forne√ßa overrides na linha abaixo (ex:\ncla=...).' }, { quoted: info });
            return;
        }
        // --- FIM DA L√ìGICA AJUSTADA ---


        // --- Processar a Ficha Base ---
        await sock.sendMessage(from, { react: { text: 'üõ†Ô∏è', key: info.key } });
        const dadosParseados = parser.parseFicha(textoFicha); // Pode receber texto vazio

        // Verifica erro do parser SOMENTE se o campo espec√≠fico n√£o foi fornecido no override
        if (dadosParseados.error) {
             if (dadosParseados.error.includes('Nome') && !overrides.nome) {
                 await sock.sendMessage(from, { react: { text: '‚ùå', key: info.key } });
                 await sock.sendMessage(from, { text: `‚ùå Erro: ${dadosParseados.error}. Forne√ßa o nome (ex:\nnome=Fulano).` }, { quoted: info });
                 return;
             }
             console.log("[Registrar] Erro do parser base ignorado devido a overrides:", dadosParseados.error);
        }

        // Aplica Overrides e Normaliza/Limpa
        let dadosFinais = {
            nome: dadosParseados.nome,
            cla: dadosParseados.cla,
            emojiCla: dadosParseados.emojiCla,
            recrutadoPorTexto: dadosParseados.recrutadoPorTexto,
            ...overrides // Aplica os overrides por cima
        };

        // Se o CL√É foi sobrescrito, re-normaliza ele
        if (overrides.cla) {
            const { claEncontrado, emojiCla } = parser.normalizeCla(overrides.cla);
            dadosFinais.cla = claEncontrado;
            dadosFinais.emojiCla = emojiCla;
        }
        // Se o RECRUTADOR foi sobrescrito, re-limpa ele
        if (overrides.recrutadoPorTexto) {
            dadosFinais.recrutadoPorTexto = parser.normalizeRecruiterNameLight(overrides.recrutadoPorTexto);
        }

        // Valida√ß√£o final: Nome e Cl√£ s√£o obrigat√≥rios
        if (!dadosFinais.nome || !dadosFinais.cla) {
              await sock.sendMessage(from, { react: { text: '‚ùå', key: info.key } });
              await sock.sendMessage(from, { text: `‚ùå Erro: Campos obrigat√≥rios faltando. Verifique Nome e Cl√£ (pode usar cla=...).` }, { quoted: info });
              return;
        }

        // --- Preparar Dados para Salvar ---
        const dadosParaSalvar = {
            nome: dadosFinais.nome,
            cla: dadosFinais.cla,
            emojiCla: dadosFinais.emojiCla,
            recrutadoPorTexto: dadosFinais.recrutadoPorTexto || 'N√£o informado',
            registradoPorJid: info.key.participant || info.key.remoteJid,
            data: moment().tz('America/Sao_Paulo').format('DD/MM/YYYY')
        };

        // --- Salvar no Banco de Dados (SQLite async) ---
        const fichaParaSalvar = {
            ...dadosParaSalvar,
            timestamp: Date.now(),
            vcard: dadosParseados.vcard || gerarVCardFallback(dadosParaSalvar.nome, numeroLimpo)
        };

        try {
            await db.saveFicha(targetJid, fichaParaSalvar);
        } catch (eSave) {
            console.error("Erro ao salvar ficha no DB:", eSave);
            await sock.sendMessage(from, { text: '‚ùå Falha ao salvar a ficha no banco de dados.' }, { quoted: info });
            return;
        }

        // --- Feedback e A√ß√£o Final (Remover) ---
        await sock.sendMessage(from, { react: { text: '‚úÖ', key: info.key } });
        await sock.sendMessage(from, {
            text: `‚úÖ Ficha de *${dadosParaSalvar.nome}* processada com sucesso!\n*N√∫mero:* ${targetJid.split('@')[0]}\n*Cl√£:* ${dadosParaSalvar.cla} ${dadosParaSalvar.emojiCla}\n*Recrutado por:* ${dadosParaSalvar.recrutadoPorTexto}`
        }, { quoted: info });

        if (autorDaFichaJid) {
            try {
                await sock.sendMessage(from, { text: `‚ÑπÔ∏è Removendo @${autorDaFichaJid.split('@')[0]} do grupo...`, mentions: [autorDaFichaJid] });
                //await sock.groupParticipantsUpdate(from, [autorDaFichaJid], 'remove'); // Comentado para testes
            } catch (e) {
                console.error('Falha ao remover recruta:', e);
                await sock.sendMessage(from, { text: `‚ö† Falha ao remover @${autorDaFichaJid.split('@')[0]}. Verifique minhas permiss√µes.`, mentions: [autorDaFichaJid] });
            }
        }

    } catch (err) {
        console.error("Erro em executarRegistrar:", err);
        await sock.sendMessage(from, { text: `‚ùå Ocorreu um erro interno no comando !processar.` }, { quoted: info });
    }
}

/**
 * L√≥gica do comando !andamento (Filtro por Miss√£o Atual)
 */
async function executarAndamento(sock, info, args) {
    const from = info.key.remoteJid;
    const subComando = args[0]?.toLowerCase();

    try {
        const isAdmin = await checkAdmin(sock, info);
        if (!isAdmin) { /* ... (erro admin) ... */ return; }

        // --- L√ìGICA DE DEFINI√á√ÉO DO PER√çODO DA MISS√ÉO ---
        const now = moment().tz('America/Sao_Paulo');
        const dayOfWeek = now.isoWeekday(); // 1 (Segunda) a 7 (Domingo)

        let startOfPeriod, endOfPeriod, missionPeriodStr;

        if (dayOfWeek >= 1 && dayOfWeek <= 2) { // Segunda ou Ter√ßa -> Per√≠odo Seg-Ter
            startOfPeriod = now.clone().isoWeekday(1).startOf('day'); // Vai para a Segunda 00:00
            endOfPeriod = now.clone().isoWeekday(2).endOf('day');   // Vai para a Ter√ßa 23:59:59
            missionPeriodStr = `Miss√£o Atual (Seg-Ter)`;
        } else if (dayOfWeek >= 4 && dayOfWeek <= 5) { // Quinta ou Sexta -> Per√≠odo Qui-Sex
            startOfPeriod = now.clone().isoWeekday(4).startOf('day'); // Vai para a Quinta 00:00
            endOfPeriod = now.clone().isoWeekday(5).endOf('day');   // Vai para a Sexta 23:59:59
            missionPeriodStr = `Miss√£o Atual (Qui-Sex)`;
        } else {
            // Quarta, S√°bado ou Domingo -> Mostra o per√≠odo da √öLTIMA miss√£o conclu√≠da
            if (dayOfWeek === 3) { // Quarta -> Mostra Seg-Ter anterior
                 startOfPeriod = now.clone().isoWeekday(1).startOf('day');
                 endOfPeriod = now.clone().isoWeekday(2).endOf('day');
                 missionPeriodStr = `√öltima Miss√£o (Seg-Ter)`;
            } else { // S√°bado ou Domingo -> Mostra Qui-Sex anterior
                 startOfPeriod = now.clone().isoWeekday(4).startOf('day');
                 endOfPeriod = now.clone().isoWeekday(5).endOf('day');
                 missionPeriodStr = `√öltima Miss√£o (Qui-Sex)`;
            }
             // Ajuste para garantir que estamos pegando a semana correta se j√° passou o dia
             if (now.isBefore(startOfPeriod)) {
                 // Ex: Se hoje √© Domingo e startOfPeriod √© Quinta da *pr√≥xima* semana
                 // precisamos subtrair 7 dias para pegar a Quinta *passada*.
                 // Isso n√£o deve acontecer com isoWeekday, mas √© uma seguran√ßa.
                 // UPDATE: A l√≥gica padr√£o do isoWeekday j√° deve lidar com isso corretamente.
                 // Se hoje √© Domingo (7), isoWeekday(4) vai para a Quinta da mesma semana.
             }
        }

        const startTimestamp = startOfPeriod.valueOf();
        const endTimestamp = endOfPeriod.valueOf();
        const periodoExibicao = `${startOfPeriod.format('DD/MM')} a ${endOfPeriod.format('DD/MM')}`;

        console.log(`[Andamento] Per√≠odo calculado: ${missionPeriodStr} (${periodoExibicao})`);
        // --- FIM DA L√ìGICA DE PER√çODO ---


        // --- BUSCA NO BANCO DE DADOS (COM FILTRO) ---
        // Chama a nova fun√ß√£o do DB passando os timestamps
        const fichasArray = await db.getFichasByTimestamp(startTimestamp, endTimestamp); // Retorna ARRAY
        // --- FIM DA BUSCA ---

        // Valida√ß√£o se encontrou fichas NO PER√çODO
        if (!fichasArray || fichasArray.length === 0) {
            await sock.sendMessage(from, { text: `‚ÑπÔ∏è Nenhuma ficha encontrada para a ${missionPeriodStr} (${periodoExibicao}).` }, { quoted: info });
            return;
        }

        // --- Processamento (Clas ou Players) ---
        // A l√≥gica de contagem agora opera diretamente no 'fichasArray' filtrado
        if (subComando === 'clas') {
            const contagem = {};
            // --- CORRE√á√ÉO: Loop de Contagem ---
            for (const ficha of fichasArray) {
                const cla = ficha.cla || 'Sem Cl√£';
                contagem[cla] = (contagem[cla] || 0) + 1;
            }
            // --- FIM DA CORRE√á√ÉO ---

            let resposta = `üìä *Andamento por Cl√£ (${missionPeriodStr} - ${periodoExibicao})*\n\n`;
            const clasOrdenados = Object.entries(contagem).sort(([, a], [, b]) => b - a);

            // --- CORRE√á√ÉO: Loop de Formata√ß√£o ---
            for (const [cla, total] of clasOrdenados) {
                const emoji = fichasArray.find(f => f.cla === cla)?.emojiCla || '‚ùì';
                resposta += `${emoji} *${cla}:* ${total} recrutas\n`;
            }
            // --- FIM DA CORRE√á√ÉO ---

            resposta += `\n*Total no Per√≠odo:* ${fichasArray.length} fichas.`;
            await sock.sendMessage(from, { text: resposta }, { quoted: info });

        } else if (subComando === 'players') {
            const contagemPorRecrutador = {};
            // --- CORRE√á√ÉO: Loop de Contagem ---
            for (const ficha of fichasArray) {
                const recrutadorNome = ficha.recrutadoPorTexto || 'N√£o Informado';
                contagemPorRecrutador[recrutadorNome] = (contagemPorRecrutador[recrutadorNome] || 0) + 1;
            }
            // --- FIM DA CORRE√á√ÉO ---

            let resposta = `üìà *Recrutamento por Player (${missionPeriodStr} - ${periodoExibicao})*\n_(Quem indicou o recruta)_\n\n`;
            const recrutadoresOrdenados = Object.entries(contagemPorRecrutador)
                .sort(([, a], [, b]) => b - a);

            // --- CORRE√á√ÉO: Loop de Formata√ß√£o ---
            for (const [nomeRecrutador, total] of recrutadoresOrdenados) {
                resposta += `üë• *${nomeRecrutador}:* ${total} recrutas\n`;
            }
            // --- FIM DA CORRE√á√ÉO ---

            resposta += `\n*Total no Per√≠odo:* ${fichasArray.length} fichas.`;
            await sock.sendMessage(from, { text: resposta }, { quoted: info });
        } else {
            // Nenhum sub-comando v√°lido
            await sock.sendMessage(from, { text: '‚ö† Comando inv√°lido. Use:\n*!andamento clas*\n*!andamento players*' }, { quoted: info });
        }

    } catch (err) {
        console.error("Erro em executarAndamento:", err);
        await sock.sendMessage(from, { text: `‚ùå Ocorreu um erro interno no comando !andamento.` }, { quoted: info });
    }
}

/**
 * L√≥gica do comando !exportar
 * Envia arquivos .vcf separados por cl√£, com filtro de data opcional.
 */
async function executarExportarContatos(sock, info, args) {
    const from = info.key.remoteJid;

    try {
        const isAdmin = await checkAdmin(sock, info);
        if (!isAdmin) {
            await sock.sendMessage(from, { text: '‚ö† Apenas administradores podem usar este comando.' }, { quoted: info });
            return;
        }

        // --- MUDAN√áA: agora await para DB async ---
        const fichas = await db.getAllFichas();
        let fichasArray = Array.isArray(fichas) ? fichas : Object.values(fichas); // Usa 'let' para poder reatribuir

        if (fichasArray.length === 0) {
            await sock.sendMessage(from, { text: '‚ÑπÔ∏è Nenhuma ficha foi processada ainda para exportar.' }, { quoted: info });
            return;
        }

        // --- NOVA L√ìGICA: FILTRO DE DATA ---
        let dataInicio = null;
        let dataFim = null;
        let periodoStr = "Tudo"; // Padr√£o

        const dateRangeArg = args[0]; // Pega o primeiro argumento (pode ser a data)

        if (dateRangeArg && dateRangeArg.includes('-') && dateRangeArg.match(/^\d{2}\/\d{2}\/\d{4}-\d{2}\/\d{2}\/\d{4}$/)) {
            const [inicioStr, fimStr] = dateRangeArg.split('-');

            // Usa moment para analisar as datas no fuso hor√°rio correto e valida
            dataInicio = moment.tz(inicioStr, "DD/MM/YYYY", "America/Sao_Paulo").startOf('day');
            dataFim = moment.tz(fimStr, "DD/MM/YYYY", "America/Sao_Paulo").endOf('day'); // Pega at√© o fim do dia

            if (!dataInicio.isValid() || !dataFim.isValid()) {
                await sock.sendMessage(from, { text: '‚ö† Formato de data inv√°lido. Use DD/MM/YYYY-DD/MM/YYYY.' }, { quoted: info });
                return;
            }
            if (dataInicio.isAfter(dataFim)) {
                 await sock.sendMessage(from, { text: '‚ö† A data de in√≠cio n√£o pode ser depois da data de fim.' }, { quoted: info });
                return;
            }

            // Filtra o array de fichas
            fichasArray = fichasArray.filter(ficha => {
                // Compara usando o timestamp salvo (mais preciso)
                const fichaTimestamp = ficha.timestamp;
                return fichaTimestamp >= dataInicio.valueOf() && fichaTimestamp <= dataFim.valueOf();
            });

            periodoStr = `de ${dataInicio.format("DD/MM/YY")} a ${dataFim.format("DD/MM/YY")}`;

            if (fichasArray.length === 0) {
                await sock.sendMessage(from, { text: `‚ÑπÔ∏è Nenhuma ficha encontrada no per√≠odo de ${periodoStr}.` }, { quoted: info });
                return;
            }

            await sock.sendMessage(from, { text: `üîç Filtrando exporta√ß√£o para o per√≠odo: ${periodoStr}...`}, { quoted: info });
        }
        // --- FIM DA NOVA L√ìGICA ---


        // --- 1. Agrupar Fichas (filtradas ou n√£o) por Cl√£ ---
        const fichasPorCla = {};
        for (const ficha of fichasArray) { // Agora usa o array potencialmente filtrado
            const cla = ficha.cla || 'Sem Cla';
            if (!fichasPorCla[cla]) {
                fichasPorCla[cla] = [];
            }
            fichasPorCla[cla].push(ficha);
        }

        const totalClas = Object.keys(fichasPorCla).length;
        if (totalClas === 0) { // Pode acontecer se o filtro n√£o retornar nada
             await sock.sendMessage(from, { text: `‚ÑπÔ∏è Nenhuma ficha encontrada${dataInicio ? ' no per√≠odo especificado' : ''}.` }, { quoted: info });
             return;
        }

        await sock.sendMessage(from, { text: `‚ÑπÔ∏è Encontrados ${totalClas} cl√£s com fichas ${dataInicio ? `no per√≠odo de ${periodoStr}` : 'no total'}. Preparando arquivos...` }, { quoted: info });

        // --- 2. Preparar Diret√≥rio Tempor√°rio ---
        const tempDir = path.join(__dirname, '..', '..', 'temp');
        if (!fs.existsSync(tempDir)) { fs.mkdirSync(tempDir); }

        let arquivosEnviados = 0;
        const dataHoje = moment().tz('America/Sao_Paulo').format('DD-MM-YYYY');

        // --- 3. Iterar por cada Cl√£ e Enviar o Arquivo ---
        for (const claNome in fichasPorCla) {
            const fichasDoCla = fichasPorCla[claNome];
            const totalRecrutas = fichasDoCla.length;
            // if (totalRecrutas === 0) continue; // N√£o √© mais necess√°rio, j√° filtramos antes

            const vcfContent = fichasDoCla.map(f => f.vcard).filter(Boolean).join('\n');
            if (!vcfContent) { /* ... (warning) ... */ continue; }

            // --- 4. Criar Nome de Arquivo e Legenda ---
            const emoji = fichasDoCla[0]?.emojiCla || '‚ùì'; // Pega emoji da primeira ficha do cl√£
            const claNomeSanitizado = claNome.replace(/[^a-z0-9_-]/gi, '_');
            // Adiciona o per√≠odo ao nome do arquivo se houver filtro
            const periodoArquivo = dataInicio ? `_${dataInicio.format("DDMMYY")}-${dataFim.format("DDMMYY")}` : '';
            const fileName = `${emoji}_${claNomeSanitizado}${periodoArquivo}_${dataHoje}.vcf`;
            const caption = `üì¶ Contatos do Cl√£: *${claNome}*\nüìã Total de Recrutas${dataInicio ? ` (${periodoStr})` : ''}: ${totalRecrutas}`;

            // --- 5. Salvar e Enviar ---
            const tempFilePath = path.join(tempDir, `${claNomeSanitizado}_${Date.now()}.vcf`);
            fs.writeFileSync(tempFilePath, vcfContent + '\n', 'utf8');

            await sock.sendMessage(from, {
                document: fs.readFileSync(tempFilePath),
                fileName: fileName,
                mimetype: 'text/x-vcard',
                caption: caption
            }, { quoted: info });

            fs.unlinkSync(tempFilePath);
            arquivosEnviados++;
            await new Promise(resolve => setTimeout(resolve, 500)); // Pequena pausa para evitar flood
        }

        // --- 6. Feedback Final ---
        await sock.sendMessage(from, { text: `‚úÖ Exporta√ß√£o conclu√≠da! Foram enviados ${arquivosEnviados} arquivos .vcf ${dataInicio ? `referentes ao per√≠odo ${periodoStr}` : 'com todos os contatos'}.` }, { quoted: info });

    } catch (err) {
        console.error("Erro em executarExportarContatos:", err);
        await sock.sendMessage(from, { text: `‚ùå Ocorreu um erro interno ao exportar os contatos.` }, { quoted: info });
    }
}

// --- FUN√á√ÉO DE MENU ATUALIZADA ---
/**
 * Exibe o menu de ajuda com os comandos do m√≥dulo de recrutamento.
 */
async function executarMenuAdmin(sock, info, args) {
    const from = info.key.remoteJid;

    try {
        const isAdmin = await checkAdmin(sock, info);
        if (!isAdmin) {
            await sock.sendMessage(from, { text: '‚ö† Apenas administradores podem usar este comando.' }, { quoted: info });
            return;
        }

        // --- TEXTO DO MENU REFORMATADO ---
        const helpText = `
‚Ä¢‚ûñ‚ûñ‚ù∞‚ú® ‚ü¶‚Ä¢ ‚úû ‚ù≤üïâ‚ù≥ ‚úû ‚Ä¢‚üß ‚ú®‚ù±‚ûñ‚ûñ‚Ä¢

    üïâ‚ù∞‚ú®\` Bot Recrutamento \`‚ú®‚ù±üïâ

    üìå‚Ä¢ üì∞ ‚ù™ Menu de Comandos ‚ù´ üì∞ ‚Ä¢üìå

‚Ä¢‚ûñ‚ûñ‚ù∞‚ú® ‚ü¶‚Ä¢ ‚úû ‚ù≤üïâ‚ù≥ ‚úû ‚Ä¢‚üß ‚ú®‚ù±‚ûñ‚ûñ‚Ä¢

üêù *Comandos Dispon√≠veis (Admins):* üêù

*1. Processar Ficha:*
   Salva o recruta, formata o contato e remove do grupo.

   *Modo Resposta:*
   \`\`\`!processar <n√∫mero_completo>\`\`\`
   _(Responda √† ficha)_

   *Modo Override:*
   \`\`\`!processar <n√∫mero_completo> [campo=valor]\`\`\`
   _(Ex: cla=Uchiha nome="Novo Nome")_
   _(Campos: nome, cla, recrutadopor)_

*2. Ver Andamento:*
   Mostra estat√≠sticas.

   *Contagem por Cl√£:*
   \`\`\`!andamento clas\`\`\`

   *Contagem por Recrutador (Indicador):*
   \`\`\`!andamento players\`\`\`

*3. Exportar Contatos:*
   Envia arquivos .VCF por cl√£.

   *Exportar Todos:*
   \`\`\`!exportar\`\`\`

   *Exportar por Per√≠odo:*
   \`\`\`!exportar DD/MM/YYYY-DD/MM/YYYY\`\`\`

*4. Ajuda:*
   Mostra este menu.
   \`\`\`!menu\`\`\` ou \`\`\`!ajuda\`\`\`

‚Ä¢‚ûñ‚ûñ‚ù∞‚ú® ‚ü¶‚Ä¢ ‚úû ‚ù≤üïâ‚ù≥ ‚úû ‚Ä¢‚üß ‚ú®‚ù±‚ûñ‚ûñ‚Ä¢
‚Ä¢ ‡∏Ñ‡∏£‡∏£ : ‚úí
üñ•Ô∏è‚ù∞¬∞ü§ñ Setor de TI ü§ñ¬∞‚ù±üñ•Ô∏è
        `;
        // --- FIM DO TEXTO REFORMATADO ---

        await sock.sendMessage(from, { text: helpText.trim() }, { quoted: info });

    } catch (err) {
        console.error("Erro em executarMenuAdmin:", err);
        try {
            await sock.sendMessage(from, { text: `‚ùå Ocorreu um erro ao exibir o menu de ajuda.` }, { quoted: info });
        } catch (e2) {}
    }
}
// --- FIM DA FUN√á√ÉO ATUALIZADA ---

// Exporta o handler principal que o messageRouter vai chamar
module.exports = { handlerRecrutamento };